#ARGS: 64 24;
@main(x: int, y: int) {
.l0:
  greater: int = id y;
.l1:
  v4: bool = gt x y;
  br v4 .l2 .l3;
.l2:
  greater: int = id x;
  jmp .l3;
.l3:
  modX : int = call @getMod greater x;
.l4:
  modY : int = call @getMod greater y;
.l5:
  zero: int = const 0;
.l6:
  xZero : bool = eq modX zero;
.l7:
  yZero : bool = eq modY zero;
.l8:
  bothZero : bool = and xZero yZero;
  br bothZero .l9 .l10;
.l9:
  print greater;
  jmp .l12;
.l10:
  one: int = const 1;
.l11:
  greater:int = add greater one;
  jmp .l3;
}
@getMod(val: int, mod: int): int{
.l0:
  divisor: int = div val mod;
.l1:
  multiple: int = mul divisor mod;
.l2:
  rem: int = sub val multiple;
.l3:
  ret rem;
}
