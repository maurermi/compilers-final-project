# ARGS: 12321;
@main(in: int) {
#in: int = const 2343553432;
.l0:
  ten: int = const 10;
.l1:
  zero: int = const 0;
.l2:
  one: int = const 1;
.l3:
  index: int = const 1;
.l4:
  not_finished: bool = const true;
  br not_finished .l5 .l10;
.l5:
  power: int = call @pow ten index;
.l6:
  d: int = div in power;
.l7:
  check: bool = eq d zero;
  br check .l8 .l9;
.l8:
  not_finished: bool = const false;
  jmp .l5;
.l9:
  index: int = add index one;
  jmp .l5;
.l10:
  exp: int = sub index one;
.l11:
  is_palindrome: bool = call @palindrome in exp;
.l12:
  print is_palindrome;
}
@pow(base: int, exp: int): int {
.l0:
  res: int = const 1;
.l1:
  zero: int = const 0;
.l2:
  one: int = const 1;
.l3:
  not_finished: bool = const true;
  br not_finished .l4 .l8;
.l4:
  finished: bool = eq exp zero;
  br finished .l5 .l6;
.l5:
  not_finished: bool = const false;
  jmp .l4;
.l6:
  res: int = mul res base;
.l7:
  exp: int = sub exp one;
  jmp .l4;
.l8:
  ret res;
}
@palindrome(in: int, len: int): bool {
.l0:
  is_palindrome: bool = const false;
.l1:
  zero: int = const 0;
.l2:
  two: int = const 2;
.l3:
  ten: int = const 10;
.l4:
  check: bool = le len zero;
  br check .l5 .l6;
.l5:
  is_palindrome: bool = const true;
  jmp .l19;
.l6:
  power: int = call @pow ten len;
.l7:
  left: int = div in power;
.l8:
  v1: int = div in ten;
.l9:
  v2: int = mul v1 ten;
.l10:
  right: int = sub in v2;
.l11:
  is_equal: bool = eq left right;
  br is_equal .l12 .l18;
.l12:
  temp: int = mul power left;
.l13:
  temp: int = sub in temp;
.l14:
  temp: int = sub temp right;
.l15:
  next_in: int = div temp ten;
.l16:
  next_len: int = sub len two;
.l17:
  is_palindrome: bool = call @palindrome next_in next_len;
  jmp .l19;
.l18:
  is_palindrome: bool = const false;
  jmp .l19;
.l19:
  ret is_palindrome;
}
